"""
Django settings for IIDS project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import queue
import configparser

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# 确定INI配置文件的位置
config_file_path = os.path.join(BASE_DIR, 'IIDS', 'config.ini')
# 创建ConfigParser对象并读取配置文件
config = configparser.ConfigParser()
config.read(config_file_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-6#1s)2xvz-n@5(%16ewkb$wls*xbfg(o$&mgk^pp1tfumpj3%a'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'corsheaders',
    'django_redis',
    'his.apps.HisConfig',
    'real.apps.RealConfig',
    'report.apps.ReportConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'report.middlewares.LogResponseMiddleware',
]

# CORS_ALLOWED_ORIGINS = ["http://localhost:5173"]
CORS_ALLOW_ALL_ORIGINS = True


ROOT_URLCONF = 'IIDS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'IIDS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
    'default' :{
        'ENGINE': 'django.db.backends.mysql',
        'NAME': config.get('database', 'db_name'),
        'USER': config.get('database', 'db_user'),
        'PASSWORD': config.get('database', 'db_password'),
        'HOST': config.get('database', 'db_host'),
        'PORT': '',
    }
}

# 配置redis缓存
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': config.get('database', 'redis_location'),  # Redis服务器地址和数据库编号
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = config.get('setting', 'LANGUAGE_CODE')

TIME_ZONE = config.get('setting', 'TIME_ZONE')

USE_I18N = True
USE_L10N = True
USE_TZ = True  # 启用时区支持,数据库存储时间为UTC


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ---------------- 日志 ------------------
BASE_LOG_DIR = os.path.join(BASE_DIR, 'log')

# 创建队列
log_queue = queue.Queue()
plc_queue = queue.Queue()

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 设置已存在的logger不失效
    'filters': {},
    'formatters': {
        'standard': {
            'format': '[%(asctime)s][%(levelname)s][%(filename)s:%(lineno)d:%(funcName)s]：%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        },
        'simple':{
            'format':'[%(asctime)s][%(levelname)s]：%(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S'
        }
    },
    'handlers': {
        'console': {  # 控制台输出日志
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'plcLog': {  # 数据刷新日志 # 定时任务日志 废弃后改为队列日志
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'plcLog.log'),
            'maxBytes': 1024 * 1024 * 10,  # 日志大小20M
            'backupCount': 2,
            'formatter': 'standard',
            'encoding': 'utf-8',
        },
        'taskLog': {  # 定时任务日志 废弃后改为队列日志
            'level': 'INFO',  # 只记录INFO级别及以上的日志
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'taskLog.log'),
            'maxBytes': 1024 * 1024 * 10,  # 文件最大10MB
            'backupCount': 3,
            'formatter': 'standard',  # 使用新的格式化器
            'encoding': 'utf-8',
        },
        'plcLogQueue': {
            'level': 'INFO',
            'class': 'logging.handlers.QueueHandler',
            'queue': plc_queue,
        },
        'taskLogQueue': {
            'level': 'INFO',
            'class': 'logging.handlers.QueueHandler',
            'queue': log_queue,
        },
        'programLog': {  # 新增一个文件处理器
            'level': 'INFO',  # 只记录INFO级别及以上的日志
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'programLog.log'),
            'maxBytes': 1024 * 1024 * 10,  # 文件最大10MB
            'backupCount': 5,
            'formatter': 'standard',  # 使用新的格式化器
            'encoding': 'utf-8',
        },
        'laserLog': {  # 激光扫描日志处理器
            'level': 'INFO',  # 只记录INFO级别及以上的日志
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_LOG_DIR, 'laserLog.log'),
            'maxBytes': 1024 * 1024 * 20,  # 文件最大20MB
            'backupCount': 5,
            'formatter': 'standard',  # 使用新的格式化器
            'encoding': 'utf-8',
        },
    },
    'loggers': {
        'plcLog': {  # 定时器plc数据刷新日志
            'handlers': ['plcLogQueue'],
            'level': 'DEBUG',
            'propagate': True
        },
        'taskLog': {  # 定时器逻辑处理过程日志
            'handlers': ['taskLogQueue'],
            'level': 'DEBUG',
            'propagate': True
        },
        'programLog': {  # 程序日志
            'handlers': ['programLog'],
            'level': 'DEBUG',
            'propagate': True
        },
        'laserLog': {  # plc和激光扫描日志
            'handlers': ['laserLog'],
            'level': 'DEBUG',
            'propagate': True
        },
    },
}